local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local Library = {}

function Library:CreateWindow(name)
    local main = Instance.new("ScreenGui", game.CoreGui)
    local holder = Instance.new("Frame", main)
    holder.Size = UDim2.new(0, 500, 0, 320)
    holder.Position = UDim2.new(0.5, -250, 0.5, -160)
    holder.BackgroundColor3 = Color3.fromRGB(25,25,25)
    holder.BorderSizePixel = 0

    local uicorner = Instance.new("UICorner", holder)
    uicorner.CornerRadius = UDim.new(0, 12)

    local title = Instance.new("TextLabel", holder)
    title.Size = UDim2.new(1, 0, 0, 40)
    title.BackgroundTransparency = 1
    title.Text = name or "UI - By Báº¡n"
    title.Font = Enum.Font.GothamBold
    title.TextColor3 = Color3.fromRGB(255,255,255)
    title.TextSize = 22

    local tabs = Instance.new("Frame", holder)
    tabs.Size = UDim2.new(0, 120, 1, -40)
    tabs.Position = UDim2.new(0, 0, 0, 40)
    tabs.BackgroundColor3 = Color3.fromRGB(35,35,35)

    local tabHolder = Instance.new("Frame", holder)
    tabHolder.Size = UDim2.new(1, -120, 1, -40)
    tabHolder.Position = UDim2.new(0, 120, 0, 40)
    tabHolder.BackgroundTransparency = 1

    Instance.new("UIListLayout", tabs).Padding = UDim.new(0, 5)

    holder.BackgroundTransparency = 1
    task.spawn(function()
        for i = 1, 10 do
            holder.BackgroundTransparency = 1 - i * 0.1
            task.wait(0.02)
        end
    end)

    return holder, tabs, tabHolder
end

function Library:CreateTab(tabs, tabHolder, name)
    local button = Instance.new("TextButton", tabs)
    button.Size = UDim2.new(1, 0, 0, 30)
    button.BackgroundColor3 = Color3.fromRGB(45,45,45)
    button.Text = name or "Tab"
    button.TextColor3 = Color3.fromRGB(255,255,255)
    button.Font = Enum.Font.GothamBold
    button.TextSize = 18

    local page = Instance.new("Frame", tabHolder)
    page.Size = UDim2.new(1, 0, 1, 0)
    page.BackgroundTransparency = 1
    page.Visible = false

    Instance.new("UIListLayout", page).Padding = UDim.new(0, 6)

    button.MouseButton1Click:Connect(function()
        for _, v in pairs(tabHolder:GetChildren()) do
            if v:IsA("Frame") then
                v.Visible = false
            end
        end
        page.Visible = true
    end)

    return page
end

function Library:CreateButton(tab, options)
    local button = Instance.new("TextButton", tab)
    button.Size = UDim2.new(1, -20, 0, 40)
    button.BackgroundColor3 = Color3.fromRGB(60,60,60)
    button.Text = options.Name or "Button"
    button.TextColor3 = Color3.fromRGB(255,255,255)
    button.Font = Enum.Font.GothamBold
    button.TextSize = 18

    Instance.new("UICorner", button).CornerRadius = UDim.new(0, 8)

    button.MouseButton1Click:Connect(function()
        if options.Callback then
            options.Callback()
        end
    end)

    return button
end

function Library:CreateToggle(tab, options)
    local holder = Instance.new("Frame", tab)
    holder.Size = UDim2.new(1, -20, 0, 40)
    holder.BackgroundColor3 = Color3.fromRGB(60,60,60)
    Instance.new("UICorner", holder).CornerRadius = UDim.new(0,8)

    local label = Instance.new("TextLabel", holder)
    label.Size = UDim2.new(0.7, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = options.Name or "Toggle"
    label.TextColor3 = Color3.fromRGB(255,255,255)
    label.Font = Enum.Font.GothamBold
    label.TextSize = 18
    label.TextXAlignment = Enum.TextXAlignment.Left

    local toggle = Instance.new("TextButton", holder)
    toggle.Size = UDim2.new(0, 40, 0, 20)
    toggle.Position = UDim2.new(1, -50, 0.5, -10)
    toggle.BackgroundColor3 = Color3.fromRGB(40,40,40)
    toggle.Text = ""
    toggle.AutoButtonColor = false
    Instance.new("UICorner", toggle).CornerRadius = UDim.new(1,0)

    local on = false

    toggle.MouseButton1Click:Connect(function()
        on = not on
        if on then
            TweenService:Create(toggle, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(0,180,255)}):Play()
        else
            TweenService:Create(toggle, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(40,40,40)}):Play()
        end
        if options.Callback then
            options.Callback(on)
        end
    end)

    return toggle
end

function Library:CreateKeybind(tab, options)
    local keybind = Instance.new("TextButton", tab)
    keybind.Size = UDim2.new(1, -20, 0, 40)
    keybind.BackgroundColor3 = Color3.fromRGB(60,60,60)
    keybind.Text = options.Name .. ": ["..(options.KeyName or "None").."]"
    keybind.TextColor3 = Color3.fromRGB(255,255,255)
    keybind.Font = Enum.Font.GothamBold
    keybind.TextSize = 18
    Instance.new("UICorner", keybind).CornerRadius = UDim.new(0,8)

    local key = options.Key or Enum.KeyCode.RightShift

    UserInputService.InputBegan:Connect(function(input,gpe)
        if gpe then return end
        if input.KeyCode == key then
            if options.Callback then
                options.Callback()
            end
        end
    end)

    return keybind
end

function Library:CreateColorPicker(tab, options)
    local holder = Instance.new("Frame", tab)
    holder.Size = UDim2.new(1, -20, 0, 60)
    holder.BackgroundColor3 = Color3.fromRGB(60,60,60)
    Instance.new("UICorner", holder).CornerRadius = UDim.new(0,8)

    local label = Instance.new("TextLabel", holder)
    label.Size = UDim2.new(1, 0, 0, 20)
    label.BackgroundTransparency = 1
    label.Position = UDim2.new(0, 0, 0, 0)
    label.Text = options.Name or "Color Picker"
    label.TextColor3 = Color3.fromRGB(255,255,255)
    label.Font = Enum.Font.GothamBold
    label.TextSize = 16

    local box = Instance.new("TextButton", holder)
    box.Size = UDim2.new(0, 40, 0, 20)
    box.Position = UDim2.new(0, 10, 0, 30)
    box.BackgroundColor3 = options.Default or Color3.fromRGB(255,0,0)
    box.Text = ""
    Instance.new("UICorner", box).CornerRadius = UDim.new(1,0)

    box.MouseButton1Click:Connect(function()
        local color = Color3.fromRGB(math.random(0,255), math.random(0,255), math.random(0,255))
        box.BackgroundColor3 = color
        if options.Callback then
            options.Callback(color)
        end
    end)

    return box
end

return Library
